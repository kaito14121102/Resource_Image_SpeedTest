package com.gdt.speedtest.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT".
*/
public class ResultDao extends AbstractDao<Result, Long> {

    public static final String TABLENAME = "RESULT";

    /**
     * Properties of entity Result.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Download = new Property(1, Double.class, "download", false, "DOWNLOAD");
        public final static Property Upload = new Property(2, Double.class, "upload", false, "UPLOAD");
        public final static Property Ping = new Property(3, Double.class, "ping", false, "PING");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property TypeNetwork = new Property(6, String.class, "typeNetwork", false, "TYPE_NETWORK");
    }


    public ResultDao(DaoConfig config) {
        super(config);
    }
    
    public ResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWNLOAD\" REAL," + // 1: download
                "\"UPLOAD\" REAL," + // 2: upload
                "\"PING\" REAL," + // 3: ping
                "\"TIME\" TEXT," + // 4: time
                "\"NAME\" TEXT," + // 5: name
                "\"TYPE_NETWORK\" TEXT);"); // 6: typeNetwork
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double download = entity.getDownload();
        if (download != null) {
            stmt.bindDouble(2, download);
        }
 
        Double upload = entity.getUpload();
        if (upload != null) {
            stmt.bindDouble(3, upload);
        }
 
        Double ping = entity.getPing();
        if (ping != null) {
            stmt.bindDouble(4, ping);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String typeNetwork = entity.getTypeNetwork();
        if (typeNetwork != null) {
            stmt.bindString(7, typeNetwork);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double download = entity.getDownload();
        if (download != null) {
            stmt.bindDouble(2, download);
        }
 
        Double upload = entity.getUpload();
        if (upload != null) {
            stmt.bindDouble(3, upload);
        }
 
        Double ping = entity.getPing();
        if (ping != null) {
            stmt.bindDouble(4, ping);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String typeNetwork = entity.getTypeNetwork();
        if (typeNetwork != null) {
            stmt.bindString(7, typeNetwork);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Result readEntity(Cursor cursor, int offset) {
        Result entity = new Result( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // download
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // upload
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // ping
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // typeNetwork
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Result entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownload(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setUpload(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPing(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTypeNetwork(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Result entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Result entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Result entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
